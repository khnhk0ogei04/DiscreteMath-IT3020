#include <bits/stdc++.h>
#include <fstream>
const int MAXN = 1e4 + 1;

using namespace std;

vector<string> v;
bool visited[MAXN];
int n;
string a, b;
vector<int> adj[MAXN];
vector<int>t_adj[MAXN]; stack<int>st;
bool check(string s1, string s2) {
    int cnt = 0;
    for (int i = 0; i < s1.length(); i++) {
        if (s1[i] == s2[i]) cnt++;
    }
    return cnt == 4;

}

	bool check1(string s1, string s2) {
    map<char,int>mp;
    int cnt = 0;
    for ( int i = s1.length() - 1 ; i >= 1 ; i-- ){
    	mp[s1[i]]++;
	}
	for ( int i = 0 ; i < s2.length() ; i++ ){
		mp[s2[i]]--;
	}
	for ( int i = 1 ; i <= s1.length() - 1 ; i++ ){
		if (mp[s1[i]] > 0) return false; 
	}
	return true;
}
	
void xuli() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i != j && check(v[i], v[j])) {
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }
}                              
	void process(){
		for ( int i = 1 ; i <= n ; i++ ){
			for ( int j = 1 ; j <= n ; j++ ){
				if ( i != j && check1(v[i],v[j])){
					adj[i].push_back(j);
					t_adj[j].push_back(i);
				}
			}
		}
	}
	void dfs1( int u ){
		visited[u] = true;
		for ( int v: adj[u] ){
			if (!visited[v])
			dfs1(v);
		}
		st.push(u);
	}
	void dfs2( int u ){
		visited[u] = true;
		for ( int v: t_adj[u] ){
			if (!visited[v])
			dfs2(v);
		}
	}
	void tpltm(){
    for ( int i = 1 ; i <= n ; i++ ){
        if (!visited[i]) dfs1(i);
    }
    memset(visited,false,sizeof(visited));
    int dem = 0;
    while (!st.empty()){
        int u = st.top(); st.pop();
        if (!visited[u]){
            dem++;
            dfs2(u);
        }
    }
    std::cout << dem << std::endl;
} 
void dfs(int u) {
    visited[u] = true;
    for (int v : adj[u]) {
        if (!visited[v])
            dfs(v);
    }
}

int connected() {
    int cnt = 0;
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i);
            cnt++;
        }
    }
    return cnt;
}
int parent[MAXN];
queue<int>q;
void bfs(int s, int t) {
	q.push(s);
    visited[s] = true;
  	while (!q.empty()){
  		int u = q.front(); q.pop();
  		for ( int v: adj[u] ){
  			if (!visited[v]){
  				parent[v] = u;
  				q.push(v);
  				visited[v] = 1;
			  }
		  }
	    }
	}

void caub() {
    int k1, k2;
    for (int i = 1; i <= n; i++) {
        if (v[i] == a) k1 = i;
    }
    for (int i = 1; i <= n; i++) {
        if (v[i] == b) k2 = i;
    }
	
    memset(visited, false, sizeof(visited));
    bfs(k1, k2);
    if (visited[k2]) {
    	vector<int>tmp;
    	while ( k2 != k1 ){
    	    tmp.push_back(k2);
    	    k2 = parent[k2];
		}
		tmp.push_back(k1);
		reverse(tmp.begin(),tmp.end());
		for ( auto x: tmp ){
			std::cout<<v[x]<<" ";
		}
	}
	else std::cout<<"Khong co duong di";
}

int main() {
    ifstream f("sgb-words.txt");
    
    f >> n;
    v.resize(n + 1);

    for (int i = 1; i <= n; i++) {
        f >> v[i];
    }

    f.close();
	string s;
	std::cin>>s;
	if ( s == "CauA" ){
    xuli();
    cout << "Connected components: " << connected() << endl;

    cout << "Nhap a va b ";
    cin >> a >> b;

    caub();
	}
	if ( s == "CauB" ){
		process();
		tpltm();
	}
    return 0;
}
